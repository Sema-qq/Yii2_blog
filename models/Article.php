<?php

namespace app\models;

use Yii;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "article".
 *
 * @property integer $id
 * @property string $title
 * @property string $description
 * @property string $content
 * @property string $date
 * @property string $image
 * @property integer $viewed
 * @property integer $user_id
 * @property integer $status
 * @property integer $category_id
 *
 * @property ArticleTag[] $articleTags
 * @property Comment[] $comments
 */
class Article extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'article';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['title'],'required'],
            [['title','description','content'],'string'],
            [['date'],'date','format' => 'php:Y-m-d'],
            [['date'],'default','value' => date('Y-m-d')],
            [['title'],'string','max' => 255]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Title',
            'description' => 'Description',
            'content' => 'Content',
            'date' => 'Date',
            'image' => 'Image',
            'viewed' => 'Viewed',
            'user_id' => 'User ID',
            'status' => 'Status',
            'category_id' => 'Category ID',
        ];
    }
    //сохранение картинки в базу
    public function saveImage($filename)
    {
        //положим имя картинки в свойство и сохраним
        $this->image = $filename;
        //параметр отключает валидацию
        return $this->save(false);
        //З.Ы. валидацию отключили, т.к. валидируем в модели ImageUpload
    }
    //удаление картинки при удалении статьи
    public function deleteImage()
    {
        $imageUploadModel = new ImageUpload();
        $imageUploadModel->deleteCurrentImage($this->image);
    }

    public function beforeDelete()
    {
        $this->deleteImage();
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }
    //вывод картинки
    public function getImage()
    {
        return !empty($this->image) ? '/uploads/'.$this->image : '/no-image.png';
    }

    //сохранение категории для статьи
    public function saveCategory($category_id)
    {
        $category = Category::findOne($category_id);
        if (!empty($category) && $category != null){
            $this->link('category', $category);
            return true;
        }
    }

    public function getSelectedTags()
    {
        $selectedTags = $this->getTags()->select('id')->asArray()->all();
        return ArrayHelper::getColumn($selectedTags, 'id');
    }

    public function saveTags($tags)
    {
        //по хорошему здесь нужно сделать совсем иначе:
        //проверять уже существующие связи и добавлять новые,
        //если их нет, иа старые удалять, если они не пришли в массиве,
        //а не пересоздавать каждый раз, но в рамках данного проекта
        //подойдет и такое

        if(is_array($tags)){
            ArticleTag::deleteAll(['article_id' => $this->id]);
            foreach ($tags as $tag_id) {
                $tag = Tag::findOne($tag_id);
                $this->link('tags', $tag);
            }
        }
    }

    public function getCategory()
    {
        return $this->hasOne(Category::className(), ['id' => 'category_id']);
    }

    public function getTags()
    {
        return $this->hasMany(Tag::className(), ['id' => 'tag_id'])->viaTable('article_tag', ['article_id' => 'id']);
    }
}
