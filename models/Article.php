<?php

namespace app\models;

use Yii;
use yii\data\Pagination;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "article".
 *
 * @property integer $id
 * @property string $title
 * @property string $description
 * @property string $content
 * @property string $date
 * @property string $image
 * @property integer $viewed
 * @property integer $user_id
 * @property integer $status
 * @property integer $category_id
 *
 * @property ArticleTag[] $articleTags
 * @property Comment[] $comments
 */
class Article extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'article';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['title'],'required'],
            [['title','description','content'],'string'],
            [['date'],'date','format' => 'php:Y-m-d'],
            [['date'],'default','value' => date('Y-m-d')],
            [['title'],'string','max' => 255]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Title',
            'description' => 'Description',
            'content' => 'Content',
            'date' => 'Date',
            'image' => 'Image',
            'viewed' => 'Viewed',
            'user_id' => 'User ID',
            'status' => 'Status',
            'category_id' => 'Category ID',
        ];
    }

    /**
     * Сохранение картинки в базу
     * @param $filename
     * @return bool
     */
    public function saveImage($filename)
    {
        //положим имя картинки в свойство и сохраним
        $this->image = $filename;
        //параметр отключает валидацию
        return $this->save(false);
        //З.Ы. валидацию отключили, т.к. валидируем в модели ImageUpload
    }

    /**
     * Удаление картинки при удалении статьи
     */
    public function deleteImage()
    {
        $imageUploadModel = new ImageUpload();
        $imageUploadModel->deleteCurrentImage($this->image);
    }

    /**
     * @return bool
     */
    public function beforeDelete()
    {
        $this->deleteImage();
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    /**
     * Вывод картинки
     * @return string
     */
    public function getImage()
    {
        return !empty($this->image) ? '/uploads/'.$this->image : '/no-image.png';
    }

    /**
     * Сохранение категории для статьи
     * @param $category_id
     * @return bool
     */
    public function saveCategory($category_id)
    {
        $category = Category::findOne($category_id);
        if (!empty($category) && $category != null){
            $this->link('category', $category);
            return true;
        }
    }

    /**
     * Выделенные теги
     * @return array
     */
    public function getSelectedTags()
    {
        $selectedTags = $this->getTags()->select('id')->asArray()->all();
        return ArrayHelper::getColumn($selectedTags, 'id');
    }

    /**
     * Сохранение тегов
     * @param $tags
     */
    public function saveTags($tags)
    {
        //по хорошему здесь нужно сделать совсем иначе:
        //проверять уже существующие связи и добавлять новые, если их нет,
        //а старые удалять, если они не пришли в массиве,
        //а не пересоздавать каждый раз, но в рамках данного проекта
        //подойдет и такое

        if(is_array($tags)){
            ArticleTag::deleteAll(['article_id' => $this->id]);
            foreach ($tags as $tag_id) {
                $tag = Tag::findOne($tag_id);
                $this->link('tags', $tag);
            }
        }
    }

    /**
     * Вывод даты
     * @return string
     */
    public function getDate()
    {
        return Yii::$app->formatter->asDate($this->date);
    }

    /**
     * Пагинация
     * @param int $page_size
     * @return array
     */
    public static function getAll($page_size = 5)
    {
        //вытащили все статьи
        $query = Article::find();
        //получили их количество
        $count = $query->count();
        //создали объект пагинации, в конструктор положили количество статей
        // и количество на одной странице
        $pagination = new Pagination(['totalCount' => $count, 'pageSize' => $page_size]);
        //статьи с пагинацией уже
        $articles = $query->offset($pagination->offset)
            ->limit($pagination->limit)
            ->all();
        //кладем всё в массив для передачи в контроллер
        $data = [
            'articles' => $articles,
            'pagination' => $pagination
        ];

        return $data;
    }

    /**
     * Популярные статьи
     * @param int $limit
     * @return array|\yii\db\ActiveRecord[]
     */
    public static function getPopular($limit = 3)
    {
        return Article::find()->orderBy('viewed desc')->limit($limit)->all();
    }

    /**
     * Последние статьи
     * @param int $limit
     * @return array|\yii\db\ActiveRecord[]
     */
    public static function getRecent($limit = 4)
    {
        return Article::find()->orderBy('date asc')->limit($limit)->all();
    }

    /**
     * Сохранение статьи и автора
     */
    public function saveArticle()
    {
        $this->user_id = Yii::$app->user->id;
        return $this->save();
    }

    /**
     * Статьи
     * @return \yii\db\ActiveQuery
     */
    public function getCategory()
    {
        return $this->hasOne(Category::className(), ['id' => 'category_id']);
    }

    /**
     * Теги
     * @inheritdoc
     */
    public function getTags()
    {
        return $this->hasMany(Tag::className(), ['id' => 'tag_id'])->viaTable('article_tag', ['article_id' => 'id']);
    }

    /**
     * Комментарии
     * @return \yii\db\ActiveQuery
     */
    public function getComments()
    {
        return $this->hasMany(Comment::className(), ['article_id' => 'id']);
    }

    /**
     * Только разрешенные комментарии
     * @return array|\yii\db\ActiveRecord[]
     */
    public function getArticleComments()
    {
        return $this->getComments()->where(['status' => 1])->all();
    }
}
